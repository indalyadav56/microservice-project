services:
  # API Gateway
  api-gateway:
    image: nginx:alpine
    container_name: api-gateway
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - user-service
      - auth-service
      - role-service
      - permission-service
    networks:
      - microservice-network
    restart: unless-stopped
  
  mongodb:
    image: mongo:latest
    container_name: mongodb
    ports:
      - "27017:27017"
    volumes:
      - rbac_mongodb_data:/data/db
    environment:
      MONGO_INITDB_ROOT_USERNAME: indal
      MONGO_INITDB_ROOT_PASSWORD: indal

  # PostgreSQL Database
  postgres:
    image: postgres:16
    container_name: postgres
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "5432:5432"
    networks:
      - microservice-network
    restart: unless-stopped

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - microservice-network
    restart: unless-stopped

  # User Service
  user-service:
    build:
      context: ./services/user-service
      dockerfile: Dockerfile
    container_name: user-service
    environment:
      - APP_NAME=user-service
      - APP_LOG_LEVEL=debug
      - HTTP_HOST=0.0.0.0
      - HTTP_PORT=8080
      - GRPC_HOST=0.0.0.0
      - GRPC_PORT=50051
      - DATABASE_NAME=users
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
      - DATABASE_USERNAME=postgres
      - DATABASE_PASSWORD=postgres
      - DATABASE_SSL_MODE=disable
      - ADMIN_EMAIL=admin@example.com
      - ADMIN_PASSWORD=admin
    depends_on:
      - postgres
      - redis
    networks:
      - microservice-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Auth Service
  auth-service:
    build:
      context: ./services/auth-service
      dockerfile: Dockerfile
    container_name: auth-service
    environment:
      - APP_NAME=user-service
      - APP_LOG_LEVEL=debug
      - HTTP_HOST=0.0.0.0
      - HTTP_PORT=8080
      - GRPC_HOST=0.0.0.0
      - GRPC_PORT=50051
      - DATABASE_NAME=users
      - DATABASE_HOST=localhost
      - DATABASE_PORT=5432
      - DATABASE_USERNAME=postgres
      - DATABASE_PASSWORD=postgres
      - DATABASE_SSL_MODE=disable
      - ADMIN_EMAIL=admin@example.com
      - ADMIN_PASSWORD=admin
    depends_on:
      - postgres
    networks:
      - microservice-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Role Service
  role-service:
    build:
      context: ./services/role-service
      dockerfile: Dockerfile
    container_name: role-service
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=roles
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      - postgres
    networks:
      - microservice-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Permission Service
  permission-service:
    build:
      context: ./services/permission-service
      dockerfile: Dockerfile
    container_name: permission-service
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=permissions
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      - postgres
      - redis
    networks:
      - microservice-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring and Logging
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - microservice-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - microservice-network
    restart: unless-stopped

  vault:
    image: vault:latest
    container_name: vault
    ports:
      - "8200:8200"
    networks:
      - microservice-network

volumes:
  postgres_data:
  rbac_mongodb_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  microservice-network:
    driver: bridge

